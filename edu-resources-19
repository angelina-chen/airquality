import tkinter as tk
from tkinter import messagebox
from tkinter import ttk
import requests
import re
from functools import lru_cache
import json
import threading

class AirQualityEducation:
    def __init__(self):
        self.resources = []
        self.explored_topics = []
        self.cache = {}
    
    @lru_cache(maxsize=32)
    def get_cached_data(self, url, params):
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()

    def store_search_in_cache(self, key, data):
        self.cache[key] = data
        with open("search_cache.json", "w") as cache_file:
            json.dump(self.cache, cache_file)

    def load_cache(self):
        try:
            with open("search_cache.json", "r") as cache_file:
                self.cache = json.load(cache_file)
        except (FileNotFoundError, json.JSONDecodeError):
            self.cache = {}

    def custom_location_search(self, location_type, location_input, date_from, date_to, limit):
        base_url = "https://api.openaq.org/v1/latest"
        valid_location_types = ["city", "zipcode"]
        
        if location_type not in valid_location_types:
            messagebox.showerror("Error", f"Invalid location type. Please choose from: {valid_location_types}")
            return
        
        if location_type == "city" and not re.match("^[a-zA-Z\s]+$", location_input):
            messagebox.showerror("Error", "Invalid city name. Please enter a valid city name using only letters and spaces.")
            return
        elif location_type == "zipcode" and not re.match("^\d{5}$", location_input):
            messagebox.showerror("Error", "Invalid ZIP code. Please enter a valid 5-digit ZIP code.")
            return

        additional_params = {}
        if date_from:
            additional_params['date_from'] = date_from
        if date_to:
            additional_params['date_to'] = date_to
        if limit.isdigit():
            additional_params['limit'] = int(limit)
        elif limit:
            messagebox.showinfo("Info", "Invalid limit value. Defaulting to 100.")
        
        params = {'city': location_input} if location_type == "city" else {'location': location_input}
        params.update(additional_params)
        cache_key = json.dumps(params, sort_keys=True)

        if cache_key in self.cache:
            data = self.cache[cache_key]
        else:
            try:
                data = self.get_cached_data(base_url, tuple(params.items()))
                self.store_search_in_cache(cache_key, data)
            except requests.exceptions.HTTPError as http_err:
                messagebox.showerror("HTTP Error", f"HTTP error occurred: {http_err}")
                return
            except requests.exceptions.ConnectionError as conn_err:
                messagebox.showerror("Connection Error", f"Connection error occurred: {conn_err}")
                return
            except requests.exceptions.Timeout as timeout_err:
                messagebox.showerror("Timeout Error", f"Timeout error occurred: {timeout_err}")
                return
            except requests.exceptions.RequestException as req_err:
                messagebox.showerror("Error", f"An error occurred: {req_err}")
                return

        if 'results' in data and len(data['results']) > 0:
            result_str = f"Air quality data for {location_input}:\n"
            for result in data['results']:
                result_str += f"\nLocation: {result['location']}"
                result_str += f"\nCity: {result['city']}"
                result_str += f"\nCountry: {result['country']}"
                for measurement in result['measurements']:
                    result_str += f"\n  Parameter: {measurement['parameter']}"
                    result_str += f"\n  Value: {measurement['value']} {measurement['unit']}"
                    result_str += f"\n  Last Updated: {measurement['lastUpdated']}"
                result_str += "\n" + "-" * 50
            messagebox.showinfo("Results", result_str)
        else:
            messagebox.showinfo("No Data", f"No air quality data found for {location_input}.")

def run_gui():
    def search():
        location_type = location_type_var.get()
        location_input = location_entry.get()
        date_from = date_from_entry.get()
        date_to = date_to_entry.get()
        limit = limit_entry.get()

        # Show progress bar
        progress.start()

        # Run the search in a separate thread to avoid freezing the GUI
        search_thread = threading.Thread(target=perform_search, args=(location_type, location_input, date_from, date_to, limit))
        search_thread.start()

    def perform_search(location_type, location_input, date_from, date_to, limit):
        air_quality_education.custom_location_search(location_type, location_input, date_from, date_to, limit)
        progress.stop()

    air_quality_education = AirQualityEducation()
    air_quality_education.load_cache()

    root = tk.Tk()
    root.title("Air Quality Search")
    root.geometry("400x400")

    frame = ttk.Frame(root, padding="10")
    frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

    root.columnconfigure(0, weight=1)
    root.rowconfigure(0, weight=1)

    # Title Label
    ttk.Label(frame, text="Air Quality Search", font=("Helvetica", 16)).grid(row=0, column=0, columnspan=2, pady=10)

    ttk.Label(frame, text="Location Type:").grid(row=1, column=0, padx=10, pady=5, sticky=tk.W)
    location_type_var = tk.StringVar(value="city")
    location_type_menu = ttk.OptionMenu(frame, location_type_var, "city", "city", "zipcode")
    location_type_menu.grid(row=1, column=1, padx=10, pady=5, sticky=tk.E)

    ttk.Label(frame, text="Location:").grid(row=2, column=0, padx=10, pady=5, sticky=tk.W)
    location_entry = ttk.Entry(frame)
    location_entry.grid(row=2, column=1, padx=10, pady=5, sticky=tk.E)

    ttk.Label(frame, text="Start Date (YYYY-MM-DD):").grid(row=3, column=0, padx=10, pady=5, sticky=tk.W)
    date_from_entry = ttk.Entry(frame)
    date_from_entry.grid(row=3, column=1, padx=10, pady=5, sticky=tk.E)

    ttk.Label(frame, text="End Date (YYYY-MM-DD):").grid(row=4, column=0, padx=10, pady=5, sticky=tk.W)
    date_to_entry = ttk.Entry(frame)
    date_to_entry.grid(row=4, column=1, padx=10, pady=5, sticky=tk.E)

    ttk.Label(frame, text="Limit:").grid(row=5, column=0, padx=10, pady=5, sticky=tk.W)
    limit_entry = ttk.Entry(frame)
    limit_entry.grid(row=5, column=1, padx=10, pady=5, sticky=tk.E)

    search_button = ttk.Button(frame, text="Search", command=search)
    search_button.grid(row=6, column=0, columnspan=2, pady=20)

    # Add progress bar
    progress = ttk.Progressbar(frame, orient=tk.HORIZONTAL, length=200, mode='indeterminate')
    progress.grid(row=7, column=0, columnspan=2, pady=10)

    root.mainloop()

if __name__ == "__main__":
    run_gui()
