import datetime
import requests
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

class ClimateSimulator:
    def __init__(self, zip_code, api_key):
        self.zip_code = zip_code
        self.api_key = api_key
        self.data = []
    
    def fetch_current_weather(self):
        """Fetch current weather data from OpenWeatherMap API."""
        url = f"http://api.openweathermap.org/data/2.5/weather?zip={self.zip_code}&appid={self.api_key}&units=metric"
        response = requests.get(url)
        
        if response.status_code == 200:
            data = response.json()
            temperature = data['main']['temp']
            humidity = data['main']['humidity']
            precipitation = data['rain']['1h'] if 'rain' in data and '1h' in data['rain'] else 0
            wind_speed = data['wind']['speed']
            return temperature, humidity, precipitation, wind_speed
        else:
            print(f"Error fetching weather data: {response.status_code}")
            return None
    
    def generate_data(self, start_date, end_date):
        """Generate simulated climate data for a given time period."""
        current_date = start_date
        while current_date <= end_date:
            # Fetch current weather data
            weather_data = self.fetch_current_weather()
            
            if weather_data:
                temperature, humidity, precipitation, wind_speed = weather_data
                self.data.append({
                    'date': current_date,
                })
            
            # Move to the next day
            current_date += datetime.timedelta(days=1)
    
    def plot_data(self):
        """Plot the simulated climate data."""
        dates = [data['date'] for data in self.data]
        temperatures = [data['temperature'] for data in self.data]
        humidities = [data['humidity'] for data in self.data]
        precipitations = [data['precipitation'] for data in self.data]
        wind_speeds = [data['wind_speed'] for data in self.data]
        
        # Create a 3D figure
        fig = plt.figure(figsize=(12, 8))
        
        # Temperature plot
        ax1 = fig.add_subplot(221, projection='3d')
        ax1.scatter(dates, temperatures, range(len(dates)), c=temperatures, cmap='coolwarm')
        ax1.set_title('Temperature (Celsius)')
        ax1.set_xlabel('Date')
        ax1.set_ylabel('Temperature (Celsius)')
        ax1.set_zlabel('Days')
        
        plt.tight_layout()
        plt.show()
