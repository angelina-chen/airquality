from enum import Enum


class Stats(Enum):
    """Provide a readable alternative to concentration calculations."""
    AVG = 1
    MIN = 2
    MAX = 3


class EmptyDatasetError(Exception):
    """
    Error raised when a method relies on a non-empty dataset
    but the dataset is empty.
    """
    pass


class NoMatchingItems(Exception):
    """
    Error raised when there is no data at the requested row and
    column.
    """
    pass


def main():
    """Run the PurpleAir database application."""
    user_name = input("What is your name? ")
    print(f"Hi {user_name}! Welcome to the air quality database.")
    purple_air = DataSet()
    reviews = []
    surveys = []

    while True:
        try:
            purple_air.header = input("Enter a header for the menu: ")
        except ValueError:
            print("Header must be 30 characters or less. Please try again.")
            continue
        break

    while True:
        menu(purple_air, reviews, surveys)


def menu(my_dataset: DataSet, reviews: list, surveys: list):
    """Obtain the user's menu option choices."""
    while True:
        print(f"\n{my_dataset.header}")
        print_menu()
        option = input("Which option do you choose? ")
        try:
            int_option = int(option)
        except ValueError:
            print("Please enter a valid number next time.")
            continue
        if int_option == 1:
            my_dataset.display_cross_table(Stats.AVG)
        elif int_option == 2:
            my_dataset.display_cross_table(Stats.MIN)
        elif int_option == 3:
            my_dataset.display_cross_table(Stats.MAX)
        elif int_option == 4:
            manage_filters(my_dataset)
        elif int_option == 5:
            my_dataset.load_file()
        elif int_option == 6:
            print(my_dataset.is_air_quality_satisfactory(input("Enter the zip code to check air quality: ")))
        elif int_option == 7:
            reviews.append(collect_review())
        elif int_option == 8:
            print("Displaying all reviews:")
            for review in reviews:
                print(f"Rating: {review['rating']} - Review: {review['review']}")
        elif int_option == 9:
            survey_choice = input("Would you like to take a short survey? (yes/no) ").lower()
            if survey_choice == "yes":
                surveys.append(collect_survey())
            else:
                print("No problem! Returning to the main menu.")
        elif int_option == 10:
            print("Displaying all surveys:")
            for survey in surveys:
                print(f"Country: {survey['country']}, State/Province: {survey['state_province']}, Usual Weather: {survey['usual_weather']}")
        elif int_option == 11:
            random_number_game()
        elif int_option == 12:
            break
        else:
            print("Sorry, that selection is invalid.")
    print("Goodbye! Thanks for using the database.")
    quit()



class DataSet:
    """
    The DataSet class will present summary tables based on
    information imported from a .csv file.
    """

    def __init__(self, header=""):
        """Construct the attributes of the purple_air object."""
        self._data = None
        self.header = header
        self._zips = {}
        self._times = []

    def _initialize_labels(self):
        """Create a list from the data with no duplicates."""
        self._zips = {}
        times_of_day_set = set(self._times)
        for item in self._data:
            self._zips[item[0]] = True
            times_of_day_set.add(item[1])
        self._times = list(times_of_day_set)

    @property
    def header(self):
        """Return the value of the _header property."""
        return self._header

    @header.setter
    def header(self, header):
        """Set the value of the _header property."""
        if len(header) <= 30:
            self._header = header
        else:
            raise ValueError

    def get_zips(self):
        """Return a copy of self._zips."""
        copied_zips = self._zips.copy()
        return copied_zips

    def toggle_zip(self, target_zip: str):
        """Toggle a zip code between True and False."""
        if target_zip in self._zips:
            if self._zips[target_zip] is True:
                self._zips[target_zip] = False
            elif self._zips[target_zip] is False:
                self._zips[target_zip] = True
        else:
            raise LookupError

    def load_default_data(self):
        """Load sample data into self._data."""
        self._data = [
            ("12345", "Morning", 1.1),
            ("94022", "Morning", 2.2),
            ("94040", "Morning", 3.0),
            ("94022", "Midday", 1.0),
            ("94040", "Morning", 1.0),
            ("94022", "Evening", 3.2)]

        self._initialize_labels()

    def _cross_table_statistics(self, descriptor_one: str, descriptor_two: str):
        """
        Given a label from each category, calculate summary
        statistics for the items matching both labels.

        Keyword arguments:
            descriptor_one -- the label for the first category
            descriptor_two -- the label for the second category

        Returns a tuple of min, average, max from the matching rows.
        """
        if self._data is None:
            raise EmptyDatasetError("Dataset is empty.")
        my_list = [item[2] for item in self._data if item[0] == descriptor_one and item[1] == descriptor_two]
        if not my_list:
            raise NoMatchingItems(f"No matching items for {descriptor_one} and {descriptor_two}.")
        return round(min(my_list), 2), round(sum(my_list) / len(my_list), 2), round(max(my_list), 2)


    def display_cross_table(self, stat: Stats):
        """ 
        Given a stat from DataSet.Stats, produce a table that
        shows the value of that stat for every pair of labels from the
        two categories.
        """
        if self._data is None:
            print("Please load a dataset first.")
            return
        print()
        print(f"{' ':7}", end="")
        for item in self._times:
            print(f"{item:>8}", end="")
        print()
        for item_one in self._zips:
            if self._zips[item_one]:
                print(f"{item_one:<7}", end="")
                for item_two in self._times:
                    try:
                        value = self._cross_table_statistics(item_one, item_two)[stat.value - 1]
                        print(f"{value:>8.2f}", end="")
                    except NoMatchingItems:
                        print(f"{'N/A':>8}", end="")
                print()

def is_air_quality_satisfactory(self, zip_code: str):
    """
    Determine if the air quality is satisfactory for a given zip code.
    
    Air quality is considered satisfactory if the average PM2.5 concentration
    is in the "Good" category (0-12.0 µg/m³) according to the US AQI guidelines.
    
    Keyword arguments:
        zip_code -- the zip code to check for air quality.
    
    Returns a string indicating if the air quality is satisfactory along with
    recommendations if it is not.
    """
    if self._data is None:
        raise EmptyDatasetError("Dataset is empty.")
    if zip_code not in self._zips:
        raise LookupError(f"Zip code {zip_code} not found in dataset.")
    
    pm25_values = [item[2] for item in self._data if item[0] == zip_code]
    if not pm25_values:
        raise NoMatchingItems(f"No data for zip code {zip_code}.")
    
    avg_pm25 = sum(pm25_values) / len(pm25_values)
    
    if avg_pm25 <= 12.0:
        return f"The air quality in zip code {zip_code} is satisfactory (good)."
    elif avg_pm25 <= 35.4:
        return (f"The air quality in zip code {zip_code} is moderate. "
                "Unusually sensitive people should consider reducing prolonged or heavy exertion.")
    elif avg_pm25 <= 55.4:
        return (f"The air quality in zip code {zip_code} is unhealthy for sensitive Groups. "
                "Sensitive groups, such as people with respiratory or heart conditions, "
                "children, and older adults, should limit prolonged outdoor exertion.")
    elif avg_pm25 <= 150.4:
        return (f"The air quality in zip code {zip_code} is unhealthy. "
                "Everyone may begin to experience health effects; members of sensitive groups "
                "such as those with health conditions may experience more serious health effects. Limit outdoor activities.")
    elif avg_pm25 <= 250.4:
        return (f"The air quality in zip code {zip_code} is very unhealthy. "
                "Health alert: everyone may experience more serious health effects. "
                "Avoid outdoor activities and stay indoors as much as possible.")
    else:
        return (f"The air quality in zip code {zip_code} is hazardous. "
                "Health warning of emergency conditions: everyone is more likely to be affected. "
                "Stay indoors, avoid physical activities outdoors, and consider using air purifiers.")

def manage_filters(my_dataset: DataSet):
    """Filter the zip codes based on user input."""
    if my_dataset.get_zips() == {}:
        print("Please load a dataset first.")
        menu(my_dataset)
    else:
        print("\nThe following labels are in the dataset:")
        while True:
            my_zips = my_dataset.get_zips()
            for ele, item in enumerate(my_zips):
                mode = "ACTIVE" if my_zips[item] is True \
                    else "INACTIVE"
                print(f"{ele + 1}:{item}{mode:<7}")
            print()
            toggle_select = input("Please select an item to toggle or press "
                                  "enter/return when you are finished: ")
            try:
                int(toggle_select)
                if int(toggle_select) in range(1, len(my_zips) + 1):
                    ordered_zips = list(my_zips.keys())
                    my_dataset.toggle_zip(ordered_zips[int(toggle_select) - 1])
                    continue
            except ValueError:
                if toggle_select == "":
                    break
            print("Invalid user input: please select an item number.")
        menu(my_dataset)

def menu(my_dataset: DataSet):
    """Obtain the user's menu option choices."""
    int_option = 0
    while int_option != 9:
        print(f"\n{my_dataset.header}")
        print_menu()
        option = input("Which option do you choose? ")
        try:
            int_option = int(option)
        except ValueError:
            print("Please enter a valid number next time.")
            continue

def collect_review():
    """
    Collect a user rating and review of the service.
    
    Returns a dictionary with the rating and review.
    """
    while True:
        try:
            rating = int(input("Please rate our service (1-5): "))
            if rating < 1 or rating > 5:
                print("Rating must be between 1 and 5. Please try again.")
                continue
        except ValueError:
            print("Invalid input. Please enter a number between 1 and 5.")
            continue
        break

    review = input("Please provide your review: ")
    print("Thank you for your feedback!")

    return {"rating": rating, "review": review}

def print_menu():
    """Print the menu options."""
    print("Main Menu")
    print("1 - Print Average Particulate Concentration by Zip Code and Time")
    print("2 - Print Minimum Particulate Concentration by Zip Code and Time")
    print("3 - Print Maximum Particulate Concentration by Zip Code and Time")
    print("4 - Adjust Zip Code Filters")
    print("5 - Load Data")
    print("6 - Check Air Quality Satisfactory Status")
    print("7 -")
    print("8 - ")
    print("9 - ")
    print("10 - ")
    continue


if __name__ == "__main__":
    main()

