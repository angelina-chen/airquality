from enum import Enum


class Stats(Enum):
    """Provide a readable alternative to concentration calculations."""
    AVG = 1
    MIN = 2
    MAX = 3


class EmptyDatasetError(Exception):
    """
    Error raised when a method relies on a non-empty dataset
    but the dataset is empty.
    """
    pass


class NoMatchingItems(Exception):
    """
    Error raised when there is no data at the requested row and
    column.
    """
    pass


def main():
    """Run the PurpleAir database application."""
    user_name = input("What is your name? ")
    print("Hi " + user_name + "! Welcome to the air quality database.")
    purple_air = DataSet()
    while True:
        try:
            purple_air.header = input("Enter a header for the menu: ")
        except ValueError:
            continue
        break
    menu(purple_air)


class DataSet:
    """
    The DataSet class will present summary tables based on
    information imported from a .csv file.
    """

    def __init__(self, header=""):
        """Construct the attributes of the purple_air object."""
        self._data = None
        self.header = header
        self._zips = {}
        self._times = []

    def _initialize_labels(self):
        """Create a list from the data with no duplicates."""
        self._zips = {}
        times_of_day_set = set(self._times)
        for item in self._data:
            self._zips[item[0]] = True
            times_of_day_set.add(item[1])
        pass
        self._times = list(times_of_day_set)

    @property
    def header(self):  # this is your getter
        """Return the value of the _header property."""
        return self._header

    @header.setter
    def header(self, header):
        """Set the value of the _header property."""
        if len(header) <= 30:
            self._header = header
        else:
            raise ValueError

    def _cross_table_statistics(self, descriptor_one: str,
                                descriptor_two: str):
        """
        Given a label from each category, calculate summary
        statistics for the items matching both labels.

        Keyword arguments:
            descriptor_one -- the label for the first category
            descriptor_two -- the label for the second category

        Returns a tuple of min, average, max from the matching rows.
        """

        if self._data is None:
            raise EmptyDatasetError
        my_list = [item[2] for item in self._data if item[0] == descriptor_one
                   and item[1] == descriptor_two]
        if len(my_list) == 0:
            raise NoMatchingItems
        else:
            tuple_of_floats = (float(sum(my_list) / len(my_list)),
                               float(min(my_list)),
                               float(max(my_list)))
            return tuple_of_floats
            print()

    def display_cross_table(self, stat: Stats):
        """Display a table of statistics."""
        space = " "
        if self._data is None:
            print("Please load data.")
        else:
            filtered_zips = {item: True for item in self._zips if
                             self._zips[item] is True}
            print(f"{space:>5}", end="")
            for item in self._times:
                print(f"{item:>19}", end="")
            print()
            self._zips = dict(filtered_zips)
            for key in self._zips:
                self._zips[key] = True
            for item1 in self._zips:
                print(f"{item1}", end="")
                for item2 in self._times:
                    ele = 0
                    print(f"{space * 16 * (ele + 1)}", end="")
                    ele += 1
                    try:
                        stats_ret = self._cross_table_statistics(item1, item2)
                        print(f"{stats_ret[stat.value - 1]:>2}", end="")
                    except NoMatchingItems:
                        print(f"N/A", end="")
                print()
            print()

def menu(my_dataset: DataSet):
    """Obtain the user's menu option choices."""
    while True:
        print(f"\n{my_dataset.header}")
        print_menu()
        option = input("Which option do you choose? ")
        try:
            int_option = int(option)
        except ValueError:
            print("Please enter a valid number next time.")
            continue
        if int_option == 9:
            break
        elif int_option == 1:
            my_dataset.display_cross_table(Stats.AVG)
        elif int_option == 2:
            my_dataset.display_cross_table(Stats.MIN)
        elif int_option == 3:
            my_dataset.display_cross_table(Stats.MAX)
        elif int_option == 4:
            print("Option " + str(int_option) + " is not implemented yet! Coming soon.")
        elif int_option == 5:
            my_dataset.load_default_data()
        else:
            print("Sorry, that selection is invalid.")
    print("Goodbye! Thanks for using the database.")


def print_menu():
    """Print the menu options."""
    print("Main Menu \n1 - Print Average Particulate Concentration by Zip"
          "Code and Time \n2 - Print Minimum Particulate Concentration by Zip"
          "Code and Time \n3 - Print Maximum Particulate Concentration by Zip"
          "Code and Time \n4 - Adjust Zip Code Filters \n5 - Load Data \n9 - "
          "Quit")


def unit_test():
    """Provide a unit test to test edge cases."""
    my_dataset = DataSet()
    my_dataset.load_default_data()
    my_dataset.display_cross_table(Stats.MIN)
    my_dataset._zips["94022"] = False
    my_dataset.display_cross_table(Stats.MIN)
    my_dataset._zips["12345"] = False
    my_dataset._zips["94040"] = False
    my_dataset.display_cross_table(Stats.MIN)


if __name__ == "__main__":
    unit_test()

r"""
--- Sample Run #1 -----------------------------------------------------
                 Morning            Evening             Midday
12345                1.1                N/A                N/A
94022                2.2                3.2                1.0
94040                1.0                N/A                N/A

                 Morning            Evening             Midday
12345                1.1                N/A                N/A
94040                1.0                N/A                N/A

                 Morning            Evening             Midday
"""
