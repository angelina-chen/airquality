from enum import Enum
import csv

filename = './purple_air.csv'


class Stats(Enum):
    """Provide a readable alternative to concentration calculations."""
    AVG = 1
    MIN = 2
    MAX = 3


def main():
    """Run the PurpleAir database application."""
    user_name = input("What is your name? ")
    print("Hi " + user_name + "! Welcome to the air quality database.")
    purple_air = DataSet()
    while True:
        try:
            purple_air.header = input("Enter a header for the menu: ")
        except ValueError:
            continue
        break
    menu(purple_air)


class DataSet:
    """
    The DataSet class will present summary tables based on
    information imported from a .csv file.
    """

    def __init__(self, header=""):
        """Construct the attributes of the purple_air object."""
        self._data = None
        self.header = header
        self._zips = {}
        self._times = []

    def _initialize_labels(self):
        """Create a list from the data with no duplicates."""
        self._zips = {}
        times_of_day_set = set(self._times)
        for item in self._data:
            self._zips[item[0]] = True
            times_of_day_set.add(item[1])
        self._times = list(times_of_day_set)

    @property
    def header(self):
        """Return the value of the _header property."""
        return self._header

    @header.setter
    def header(self, header):
        """Set the value of the _header property."""
        if len(header) <= 30:
            self._header = header
        else:
            raise ValueError

    def get_zips(self):
        """Return a copy of self._zips."""
        copied_zips = self._zips.copy()
        return copied_zips

    def toggle_zip(self, target_zip: str):
        """Toggle a zip code between True and False."""
        if target_zip in self._zips:
            if self._zips[target_zip] is True:
                self._zips[target_zip] = False
            elif self._zips[target_zip] is False:
                self._zips[target_zip] = True
        else:
            raise LookupError


    def load_file(self):
        """Load Purple Air data."""
        with open(filename, 'r', newline="") as source:
            csvreader = csv.reader(source)
            data_list = []
            for r in csvreader:
                if r[0] != "Identifier":
                    data_list.append((str(r[1]), str(r[4]),
                                     round(float(r[5]), 2)))
            self._data = data_list
            print(f"{len(data_list)} lines loaded.")
            self._initialize_labels()


    def load_default_data(self):
        """Load sample data into self._data."""
        self._data = [
            ("12345", "Morning", 1.1),
            ("94022", "Morning", 2.2),
            ("94040", "Morning", 3.0),
            ("94022", "Midday", 1.0),
            ("94040", "Morning", 1.0),
            ("94022", "Evening", 3.2)]

        self._initialize_labels()

    def _cross_table_statistics(self, descriptor_one: str,
                                descriptor_two: str):
        """
        Given a label from each category, calculate summary
        statistics for the items matching both labels.

        Keyword arguments:
            descriptor_one -- the label for the first category
            descriptor_two -- the label for the second category

        Returns a tuple of min, average, max from the matching rows.
        """

        if self._data is None:
            raise EmptyDatasetError
        my_list = [item[2] for item in self._data if item[0] == descriptor_one
                   and item[1] == descriptor_two]
        if len(my_list) == 0:
            raise NoMatchingItems
        else:
            tuple_of_floats = (round(float(sum(my_list) / len(my_list)), 2),
                               round(float(min(my_list)), 2),
                               round(float(max(my_list)), 2))
            return tuple_of_floats

    def display_cross_table(self, stat: Stats):
        """ Given a stat from DataSet.Stats, produce a table that
        shows the value of that stat for every pair of labels from the
        two categories.
        """

        if not self._data:
            print("Please load a dataset first.")
            return
        print()
        print(f"{' ':7}", end="")
        for item in self._times:
            print(f"{item:>8}", end="")
        print()
        for item_one in self._zips:
            print(f"{item_one:<7}", end="")
            for item_two in self._times:
                try:
                    value = self._cross_table_statistics(item_one, item_two)[
                        stat.value - 1]
                    print(f"{value:>8.2f}", end="")
                except NoMatchingItems:
                    print(f"{'N/A':>8}", end="")
            print()
