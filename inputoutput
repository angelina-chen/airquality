from enum import Enum
import csv

filename = './purple_air.csv'


class Stats(Enum):
    """Provide a readable alternative to concentration calculations."""
    AVG = 1
    MIN = 2
    MAX = 3


def main():
    """Run the PurpleAir database application."""
    user_name = input("What is your name? ")
    print("Hi " + user_name + "! Welcome to the air quality database.")
    purple_air = DataSet()
    while True:
        try:
            purple_air.header = input("Enter a header for the menu: ")
        except ValueError:
            continue
        break
    menu(purple_air)


class DataSet:
    """
    The DataSet class will present summary tables based on
    information imported from a .csv file.
    """

    def __init__(self, header=""):
        """Construct the attributes of the purple_air object."""
        self._data = None
        self.header = header
        self._zips = {}
        self._times = []

    def _initialize_labels(self):
        """Create a list from the data with no duplicates."""
        self._zips = {}
        times_of_day_set = set(self._times)
        for item in self._data:
            self._zips[item[0]] = True
            times_of_day_set.add(item[1])
        self._times = list(times_of_day_set)

    @property
    def header(self):
        """Return the value of the _header property."""
        return self._header

    @header.setter
    def header(self, header):
        """Set the value of the _header property."""
        if len(header) <= 30:
            self._header = header
        else:
            raise ValueError

    def get_zips(self):
        """Return a copy of self._zips."""
        copied_zips = self._zips.copy()
        return copied_zips

    def toggle_zip(self, target_zip: str):
        """Toggle a zip code between True and False."""
        if target_zip in self._zips:
            if self._zips[target_zip] is True:
                self._zips[target_zip] = False
            elif self._zips[target_zip] is False:
                self._zips[target_zip] = True
        else:
            raise LookupError
