
def main():
    """Run the PurpleAir database application."""
    user_name = input("What is your name? ")
    print("Hi " + user_name + "! Welcome to the air quality database.")
    purple_air = DataSet()
    while True:
        try:
            purple_air.header = input("Enter a header for the menu: ")
        except ValueError:
            continue
        break
    menu(purple_air)


class DataSet:
    """Represent the PurpleAir dataset."""

    def __init__(self, header=""):
        """Construct the attributes of the purple_air object."""
        self._data = None
        self.header = header

    @property
    def header(self):  # this is your getter
        """Get the current header."""
        return self._header

    @header.setter
    def header(self, header):
        """Set the current header if it is 30 words or fewer."""
        if len(header) <= 30:
            self._header = header
        else:
            raise ValueError

    def _cross_table_statistics(self, descriptor_one: str,
                                descriptor_two: str):
        """Calculate relevant information about concentration."""
        if self._data is None:
            raise EmptyDatasetError
        my_list = [self._data[2][i] for i, ele in enumerate(self._data[2]) if
                   self._data[0][i] == descriptor_one and self._data[1][i] ==
                   descriptor_two]
        if len(my_list) == 0:
            raise NoMatchingItems
        else:
            tuple_of_floats = (float(min(my_list)),
                               float(sum(my_list) / len(my_list)),
                               float(max(my_list)))
            return tuple_of_floats

    def load_default_data(self):
        """Provide a default dataset."""
        zip_code = ("12345", "94022", "94040", "94022", "94040", "94022")
        time_of_day = ("Morning", "Morning", "Morning", "Midday", "Morning",
                       "Evening")

class EmptyDatasetError(Exception):
    """
    Raise a custom exception when a method is asked to do calculation on
    the dataset, but no data is loaded.
    """
    pass


class NoMatchingItems(Exception):
    """
    Raise a custom exception when _cross_table_statistics (below) does
    not find any data that matches both descriptors.
    """
    pass



def menu(my_dataset: DataSet):
    """Obtain the user's menu option choices."""
    while True:
        print(f"\n{my_dataset.header}")
        print_menu()
        option = input("Which option do you choose? ")
        try:
            int_option = int(option)
        except ValueError:
            print("Please enter a valid number next time.")
            continue
        if int_option == 9:
            break
        elif 1 <= int_option <= 5:
            print("Option " + str(int_option) + " is not implemented yet!")
        else:
            print("Sorry, that selection is invalid.")
    print("Goodbye! Thanks for using the database.")


def print_menu():
    """Print the menu options."""
    print("Main Menu \n1 - Print Average Particulate Concentration by Zip"
          "Code and Time \n2 - Print Minimum Particulate Concentration by Zip"
          "Code and Time \n3 - Print Maximum Particulate Concentration by Zip"
          "Code and Time \n4 - Adjust Zip Code Filters \n5 - Load Data \n9 - "
          "Quit")


def unit_test():
    """"Provide a unit test _cross_table_statistics."""
    my_set = DataSet()
    try:
        my_set._cross_table_statistics("something", "fail")
    except EmptyDatasetError:
        print("Method Raises EmptyDataSet Error: Pass")
    else:
        print("Method Raises EmptyDataSet Error: Fail")
    my_set.load_default_data()
    try:
        my_set._cross_table_statistics("94022", "Supper")
        print("No Matching Rows Raises NoMatchingItems: Fail")
    except NoMatchingItems:
        print("No Matching Rows Raises NoMatchingItems: Pass")
    except:
        print("No Matching Rows Raises NoMatchingItems: Fail")
    try:
        my_set._cross_table_statistics("94023", "Night")
        print("No Matching Rows Raises NoMatchingItems: Fail")
    except NoMatchingItems:
        print("No Matching Rows Raises NoMatchingItems: Pass")
    except:
        print("No Matching Rows Raises NoMatchingItems: Fail")
    try:
        my_set._cross_table_statistics("94040", "Night")
        print("No Matching Rows Raises NoMatchingItems: Fail")
    except NoMatchingItems:
        print("No Matching Rows Raises NoMatchingItems: Pass")
    except:
        print("No Matching Rows Raises NoMatchingItems: Fail")
    if my_set._cross_table_statistics("12345", "Morning") == (1.1, 1.1, 1.1):
        print("One Matching Row Returns Correct Tuple: Pass")
    else:
        print("One Matching Row Returns Correct Tuple: Fail")
    if my_set._cross_table_statistics("94040", "Morning") == (1.0, 2.0, 3.0):
        print("Multiple Matching Rows Returns Correct Tuple: Pass")
    else:
        print("Multiple Matching Rows Returns Correct Tuple: Fail")
        print(my_set._cross_table_statistics("94040", "Morning"))


if __name__ == "__main__":
    # main()
    unit_test()
